The code for task 1 is containted in the task1.cpp file.
It can be compiled and the graphs generated by running the commands:

make task1.out
./task1.out > task1.dat
gnuplot task1.gnu

The exact value of the final result depends on the nature of the random numbers generated.
The value I obtained by running 'tail task1.dat' was:

537.277 Â± 0.0680899

which was obtained with 791 samples.

The code is written in C++.
The function f represents the function the integral is being performed on.
Function fRand returns a random number generated by GSL (seeded by the system clock at runtime) between fMin and fMax.
Function MonteCarlo performs a single Monte Carlo integration using N steps and returns the result and error into the respective references.
The main part of the program takes care of calling MonteCarlo() with an increasing number of steps, and averaging over multiple runs.

--

In supplementary task 2 I plotted the diffraction pattern in gnuplot however there was a problem where above ~0.1 on the x-axis my program was giving spurious results.
I believe this is due to the program losing numerical accuracy or due to a poor choice integrator from the GSL library.
